@model LogEmotionModel
@{
    Layout = null;
}
<div class="js_logObservationBlock_emotion">
@using (Html.BeginForm(Model.Id == null ? "Emotion" : "EditEmotion", "Observation",
    new { KindergartenId = ViewBag.KindergartenId }, FormMethod.Post, null))
{
    @Html.HiddenFor(x => x.Id, new { @class = "js_ObservationId" })
    @Html.HiddenFor(x => x.UniqueId, new { @class = "js_UniqueId" })
    if (ViewBag.ReturnUrl != null)
    {
        @Html.Hidden("returnUrl", (string)ViewBag.ReturnUrl)
    }

    <div class="js_useCurrentTimeBlock">
        <input type="checkbox" name="useCurrentTime" class="js_useCurrentTime"/> <span>Использовать текущее время</span>
    </div>
    <div class="js_inputTimeBlock">
        @Html.LabelFor(x => x.DateObserved, "Дата наблюдения")
        @Html.TextBox("DateObserved", string.Format("{0:dd-MM-yyyy}", Model.DateObserved.HasValue ? Model.DateObserved : DateTime.Now), new { @class = "js_datetimebox js_DateObserved", id = "DateObservedEmotion" })
        @Html.ValidationMessageFor(x => x.DateObserved)

        <br />
        <span>Время </span>
        <select name="Hours" class="js_HoursObserved" data-val-required="Пожалуйста, укажите время (час)" data-val="true">
            <option value=""></option>
            @for (int i = 7; i <= 18; i++)
            {
            <option value="@i" @(i == Model.Hours ? "selected" : "")>@i</option>
            }
        </select>
        <span> : </span>
        <input name="Minutes" class="js_MinutesObserved timebox_minutes" 
            data-val-required="Пожалуйста, укажите время (минуты)"
            data-val-number="Пожалуйста, введите число в поле Минуты." 
            data-val-range="Пожалуйста, Введите число меньше 60-ти" 
            data-val-range-min="0" 
            data-val-range-max="59" 
            data-val="true" value="@(Model.Minutes < 10 ? "0" + Model.Minutes.ToString() : Model.Minutes.ToString() )"/>
        @*<select name="Minutes" class="js_MinutesObserved" data-val-required="Пожалуйста, укажите время (минуты)" data-val="true">
            <option value=""></option>
            @for (int i = 0; i <= 55; i += 5)
            {
            <option value="@i" @(i <= Model.Minutes && Model.Minutes < i + 5 ? "selected" : "")>@( i < 10 ? "0" + i : "" + i)</option>
            }
        </select>*@
        <br/>
        <div><span class="field-validation-valid" data-valmsg-for="Hours" data-valmsg-replace="true"></span></div>
        <div><span class="field-validation-valid" data-valmsg-for="Minutes" data-valmsg-replace="true"></span></div>
    </div>
    <div class="js_KidSelectorContainer">
        @Html.LabelFor(x => x.KidId, "Ребенок")
        <input class="js_KidIdSelect" name="KidIdSelect"/>
        @Html.HiddenFor(x => x.KidId, new { @class = "js_KidId" })
    </div>
    <div>@Html.ValidationMessageFor(x => x.KidId)</div>
    <br />   
	<a href="javascript:void(0)" class="js_addCommentLink">Комментарии (не обязательно)</a>
    <br />
	@Html.TextAreaFor(x => x.Comment, new { rows = 4, cols = 30, @class = "js_commentTextArea" })
    <br />
    @Html.ValidationMessageFor(x => x.Comment)

    <br />

    <table>
        <tr>
            <td><label><input type="radio" name="Emotion" class="js_emotion_radio" value="@((int)EmotionType.Sad)" @(Model.Emotion == EmotionType.Sad ? "checked" : "")/>@EmotionType.Sad.DisplayName()</label></td>
            <td><label><input type="radio" name="Emotion" class="js_emotion_radio" value="@((int)EmotionType.Crying)" @(Model.Emotion == EmotionType.Crying ? "checked" : "")/>@EmotionType.Crying.DisplayName()</label></td>
            <td><label><input type="radio" name="Emotion" class="js_emotion_radio" value="@((int)EmotionType.Histerical)" @(Model.Emotion == EmotionType.Histerical ? "checked" : "")/>@EmotionType.Histerical.DisplayName()</label></td>
        </tr>
        <tr>
            <td><label><input type="radio" name="Emotion" class="js_emotion_radio" value="@((int)EmotionType.Grumpy)" @(Model.Emotion == EmotionType.Grumpy ? "checked" : "")/>@EmotionType.Grumpy.DisplayName()</label></td>
            <td><label><input type="radio" name="Emotion" class="js_emotion_radio" value="@((int)EmotionType.Agressive)" @(Model.Emotion == EmotionType.Agressive ? "checked" : "")/>@EmotionType.Agressive.DisplayName()</label></td>
            <td><label><input type="radio" name="Emotion" class="js_emotion_radio" value="@((int)EmotionType.Fighting)" @(Model.Emotion == EmotionType.Fighting ? "checked" : "")/>@EmotionType.Fighting.DisplayName()</label></td>
        </tr>
        <tr>
            <td><label><input type="radio" name="Emotion" class="js_emotion_radio" value="@((int)EmotionType.Smiley)" @(Model.Emotion == EmotionType.Smiley ? "checked" : "")/>@EmotionType.Smiley.DisplayName()</label></td>
            <td><label><input type="radio" name="Emotion" class="js_emotion_radio" value="@((int)EmotionType.Happy)" @(Model.Emotion == EmotionType.Happy ? "checked" : "")/>@EmotionType.Happy.DisplayName()</label></td>
            <td><label><input type="radio" name="Emotion" class="js_emotion_radio" value="@((int)EmotionType.Cheery)" @(Model.Emotion == EmotionType.Cheery ? "checked" : "")/>@EmotionType.Cheery.DisplayName()</label></td>
        </tr>
    </table>
        if (ViewBag.ErrorMessage != null)
        {
	    <div id="errorMessage" class="errorMessage">@ViewBag.ErrorMessage</div>
        }
    <br />
	@Html.SubmitButton(null, "Сохранить", new { @class = "js_submitButton" })
    <div id="resultMessageEmotion" class="resultMessage js_resultMessage"><span></span></div> 
    <div id="counterEmotion" class="resultMessage js_counter">
        <img src="@Url.Content("~/Content/images/spinner.gif")" width="15" height="15" alt="wait"/>
        <span></span>
    </div> 
}
</div>