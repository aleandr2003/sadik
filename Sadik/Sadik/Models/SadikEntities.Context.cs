//------------------------------------------------------------------------------
// <auto-generated>
//    Этот код был создан из шаблона.
//
//    Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//    Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sadik.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class SadikEntities : DbContext
    {
        public SadikEntities()
            : base("name=SadikEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<User> Users { get; set; }
        public DbSet<Inventory> Inventory { get; set; }
        public DbSet<Kid> Kids { get; set; }
        public DbSet<Activity> Activities { get; set; }
        public DbSet<Presentation> Presentations { get; set; }
        public DbSet<Skill> Skills { get; set; }
        public DbSet<ActivityStat> ActivityStats { get; set; }
        public DbSet<Zone> Zones { get; set; }
        public DbSet<ADR> ADRs { get; set; }
        public DbSet<CameInClass> CameInClasses { get; set; }
        public DbSet<EmotionObservation> EmotionObservations { get; set; }
        public DbSet<Kindergarten> Kindergartens { get; set; }
        public DbSet<TemplateInventory> TemplateInventories { get; set; }
        public DbSet<TemplateZone> TemplateZones { get; set; }
        public DbSet<UserKindergarten> UserKindergartens { get; set; }
        public DbSet<Cities> Cities { get; set; }
        public DbSet<FutureCustomer> FutureCustomers { get; set; }
        public DbSet<ItemUsageDetail> ItemUsageDetails { get; set; }
    
        public virtual int UpdateKidActivityStats(Nullable<int> kidId)
        {
            var kidIdParameter = kidId.HasValue ?
                new ObjectParameter("KidId", kidId) :
                new ObjectParameter("KidId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateKidActivityStats", kidIdParameter);
        }
    
        public virtual ObjectResult<CalculateKidActivityStats_Result> CalculateKidActivityStats(Nullable<int> kidId, Nullable<System.DateTime> startPeriod, Nullable<System.DateTime> endPeriod)
        {
            var kidIdParameter = kidId.HasValue ?
                new ObjectParameter("KidId", kidId) :
                new ObjectParameter("KidId", typeof(int));
    
            var startPeriodParameter = startPeriod.HasValue ?
                new ObjectParameter("startPeriod", startPeriod) :
                new ObjectParameter("startPeriod", typeof(System.DateTime));
    
            var endPeriodParameter = endPeriod.HasValue ?
                new ObjectParameter("endPeriod", endPeriod) :
                new ObjectParameter("endPeriod", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CalculateKidActivityStats_Result>("CalculateKidActivityStats", kidIdParameter, startPeriodParameter, endPeriodParameter);
        }
    }
}
